{"ast":null,"code":"import _toConsumableArray from \"/Users/katerinaroskovcova/Desktop/MyProjects/PPCBee/PPCBee/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/katerinaroskovcova/Desktop/MyProjects/PPCBee/PPCBee/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/katerinaroskovcova/Desktop/MyProjects/PPCBee/PPCBee/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/katerinaroskovcova/Desktop/MyProjects/PPCBee/PPCBee/src/components/table.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from \"react\";\nimport { TableContext } from '../model/context';\nimport Settings from \"./settings\";\nimport Model from \"../model/model\";\n\nvar Table = function Table() {\n  var _useState = useState(Model()),\n      _useState2 = _slicedToArray(_useState, 2),\n      model = _useState2[0],\n      setModel = _useState2[1];\n\n  var _useContext = useContext(TableContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      columns = _useContext2[0],\n      setColumns = _useContext2[1];\n\n  var _useState3 = useState({\n    isShown: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      popup = _useState4[0],\n      setPopup = _useState4[1];\n\n  var _useState5 = useState({\n    value: \"\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tableValue = _useState6[0],\n      setTableValue = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rowPointer = _useState8[0],\n      setRowPointer = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      columnPointer = _useState10[0],\n      setColumnPointer = _useState10[1];\n\n  function updateModel(index, key, value) {\n    model[index][key] = value;\n  }\n\n  var togglePopup = function togglePopup(e, index, key) {\n    var chosenValue = e.target.innerText;\n    setColumnPointer(key.name);\n    setRowPointer(index);\n    setPopup(_objectSpread({}, popup, {\n      isShown: !popup.isShown\n    }));\n    setTableValue({\n      value: chosenValue\n    });\n  };\n\n  var handleChange = function handleChange(ev) {\n    setTableValue(_objectSpread({}, tableValue, {\n      value: ev.target.value\n    }));\n  };\n\n  var handleUpdate = function handleUpdate() {\n    var newTable = updateModel(rowPointer, columnPointer, tableValue.value);\n    setModel(_toConsumableArray(newTable));\n    setPopup(_objectSpread({}, popup, {\n      isShown: !popup.isShown\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, columns.map(function (column) {\n    return column.checked ? React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, column.name) : null;\n  })), model.map(function (data, index) {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, columns.map(function (key) {\n      return key.checked ? React.createElement(\"td\", {\n        onClick: function onClick(e) {\n          return togglePopup(e, index, key);\n        },\n        className: \"table_data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, data[key.name], \" \") : null;\n    }));\n  })), React.createElement(Settings, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), popup.isShown ? React.createElement(\"div\", {\n    className: \"popup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popup_inner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"edit_input\",\n    onChange: handleChange,\n    type: \"text\",\n    defaultValue: tableValue.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: handleUpdate,\n    className: \"edit_save\",\n    value: \"Save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Save\"))) : null);\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/katerinaroskovcova/Desktop/MyProjects/PPCBee/PPCBee/src/components/table.js"],"names":["React","useState","useContext","TableContext","Settings","Model","Table","model","setModel","columns","setColumns","isShown","popup","setPopup","value","tableValue","setTableValue","rowPointer","setRowPointer","columnPointer","setColumnPointer","updateModel","index","key","togglePopup","e","chosenValue","target","innerText","name","handleChange","ev","handleUpdate","newTable","map","column","checked","data"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {TableContext} from '../model/context';\nimport Settings from \"./settings\";\nimport Model from \"../model/model\"\n\n\n\n\nconst Table = () => {\n    const [model, setModel] = useState (Model());\n    const [columns, setColumns] = useContext(TableContext);\n    const [popup, setPopup] = useState({isShown:false});\n    const [tableValue, setTableValue] = useState({value:\"\"});\n    const [rowPointer, setRowPointer] = useState(\"\");\n    const [columnPointer, setColumnPointer] = useState(\"\");\n\n  \n    function updateModel(index, key, value) {\n        model[index][key] = value\n      }\n  \n    \n    const togglePopup = (e, index, key)=>{\n      let chosenValue = e.target.innerText;\n      setColumnPointer(key.name);\n      setRowPointer(index);\n      setPopup({...popup, isShown:!popup.isShown});\n      setTableValue({value:chosenValue});\n    }\n\n    const handleChange = (ev)=>{\n     setTableValue({...tableValue, value:ev.target.value})\n}\n    const handleUpdate = ()=>{\n        let newTable = updateModel(rowPointer, columnPointer,tableValue.value );\n        setModel([...newTable]);\n        setPopup({...popup, isShown:!popup.isShown});\n\n    }\n\n    return (\n        <div>\n            <table className=\"table\">\n                <tr>\n                  {columns.map(column =>{\n                   return column.checked ? <th>{column.name}</th> : null\n                 })} \n                </tr>\n\n                {model.map((data, index) => <tr>{columns.map(key => {return key.checked ? <td onClick={(e) => togglePopup(e, index, key)} className=\"table_data\">{data[key.name]} </td> :null})}</tr>\n                    \n                )}\n             </table>\n             <Settings />\n             {popup.isShown ? \n                <div className='popup'>\n                <div className='popup_inner'>\n                    <input className= \"edit_input\" onChange={handleChange} type=\"text\" defaultValue={tableValue.value} />\n                    <button onClick={handleUpdate} className= \"edit_save\" value=\"Save\">Save</button>\n                </div>\n              </div>\n        \n          : null\n        }\n        </div>\n    )\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}